const Test = require('thunk-test')
const Byte = require('./Byte')

describe('Byte', () => {
  it('cases', async () => {
    const test = Test.all([
      new Test(Byte.isBit1Set)
        .case(128, false)
        .case(200, false)
        .case(201, true)
        .case(202, false)
        .case(203, true)
        .case(64, false)
        .case(10, false)
        .case(11, true)
        .case(12, false)
        .case(13, true)
        .case(14, false)
        .case(20, false)
        .case(22, false)
        .case(100, false)
        .case(101, true)
        .case(102, false),

      new Test(Byte.isBit2Set)
        .case(128, false)
        .case(200, false)
        .case(201, false)
        .case(202, true)
        .case(203, true)
        .case(64, false)
        .case(10, true)
        .case(11, true)
        .case(12, false)
        .case(13, false)
        .case(14, true)
        .case(20, false)
        .case(22, true)
        .case(100, false)
        .case(101, false)
        .case(102, true),

      new Test(Byte.isBit3Set)
        .case(128, false)
        .case(200, false)
        .case(201, false)
        .case(202, false)
        .case(203, false)
        .case(64, false)
        .case(10, false)
        .case(11, false)
        .case(12, true)
        .case(13, true)
        .case(14, true)
        .case(20, true)
        .case(22, true)
        .case(100, true)
        .case(101, true)
        .case(102, true),

      new Test(Byte.isBit4Set)
        .case(128, false)
        .case(200, true)
        .case(201, true)
        .case(202, true)
        .case(203, true)
        .case(64, false)
        .case(10, true)
        .case(11, true)
        .case(12, true)
        .case(13, true)
        .case(14, true)
        .case(20, false)
        .case(22, false)
        .case(100, false)
        .case(101, false)
        .case(102, false),

      new Test(Byte.isBit5Set)
        .case(128, false)
        .case(200, false)
        .case(201, false)
        .case(202, false)
        .case(203, false)
        .case(64, false)
        .case(10, false)
        .case(11, false)
        .case(12, false)
        .case(13, false)
        .case(14, false)
        .case(20, true)
        .case(22, true)
        .case(100, false)
        .case(101, false)
        .case(102, false),

      new Test(Byte.isBit6Set)
        .case(128, false)
        .case(200, false)
        .case(201, false)
        .case(202, false)
        .case(203, false)
        .case(64, false)
        .case(10, false)
        .case(11, false)
        .case(12, false)
        .case(13, false)
        .case(14, false)
        .case(20, false)
        .case(22, false)
        .case(100, true)
        .case(101, true)
        .case(102, true),

      new Test(Byte.isBit7Set)
        .case(128, false)
        .case(200, true)
        .case(201, true)
        .case(202, true)
        .case(203, true)
        .case(64, true)
        .case(10, false)
        .case(11, false)
        .case(12, false)
        .case(13, false)
        .case(14, false)
        .case(20, false)
        .case(22, false)
        .case(100, true)
        .case(101, true)
        .case(102, true),

      new Test(Byte.isBit8Set)
        .case(128, true)
        .case(200, true)
        .case(201, true)
        .case(202, true)
        .case(203, true)
        .case(64, false)
        .case(10, false)
        .case(11, false)
        .case(12, false)
        .case(13, false)
        .case(14, false)
        .case(20, false)
        .case(22, false)
        .case(100, false)
        .case(101, false)
        .case(102, false),
    ])

    test()
  })
})
