#!/usr/bin/env node

const fs = require('fs')
const PresidiumWebSocket = require('./WebSocket')
const PresidiumWebSocketServer = require('./WebSocketServer')
const WSWebSocket = require('ws')
const WSWebSocketServer = WSWebSocket.WebSocketServer
const sleep = require('./_internal/sleep')
const package = require('./package.json')
const wsPackage = require('./node_modules/ws/package.json')

let presidiumStart = null
let wsStart = null
const presidiumMessages = []
const wsMessages = []

const start = performance.now()


{ // ws

  const server = new WSWebSocketServer({ port: 1338 })
  server.on('connection', ws => {
    ws.on('message', message => {
      ws.send(message)
    })
  })

  const ws = new WSWebSocket('ws://localhost:1338')

  ws.on('message', message => {
    wsMessages.push(message)
  })

  ws.on('open', async () => {
    while (true) {
      ws.send('small-message-16')
      // ws.send(Buffer.alloc(3 * 1024 * 1024))
      await sleep(0)
    }
  })

}

/*
{ // Presidium

  const server = new PresidiumWebSocketServer(websocket => {
    websocket.on('message', message => {
      websocket.send(message)
    })
  }, { maxMessageLength: 1024 * 1024 })
  server.listen(1337)

  const websocket = new PresidiumWebSocket('ws://localhost:1337')

  websocket.on('message', message => {
    presidiumMessages.push(message)
  })

  websocket.on('open', async () => {
    while (true) {
      websocket.send('small-message-16')
      // websocket.send(Buffer.alloc(3 * 1024 * 1024))
      await sleep(0)
    }
  })

}
*/

setImmediate(async () => {
  const writeStream = fs.createWriteStream(
    `${__dirname}/benchmark-output/v${package.version}`,
    { flags: 'w' }
  )

  function write(s) {
    writeStream.write(s)
    process.stdout.write(s)
  }

  write(`presidium-websocket@${package.version}`)
  write('\n')
  write(`ws@${wsPackage.version}`)
  write('\n\n')

  let numDiffs = 0

  while (true) {
    const now = performance.now()
    const presidiumThroughput = presidiumMessages.length / (now - start) * 1000
    const wsThroughput = wsMessages.length / (now - start) * 1000
    const diff = presidiumThroughput - wsThroughput

    const logMessage = `
Time: ${now / 1000} seconds
Presidium throughput: ${presidiumThroughput} messages/s
Presidium messages:   ${presidiumMessages.length}
ws throughput:        ${wsThroughput} messages/s
ws messages:          ${wsMessages.length}
diff throughput:      ${diff} messages/s
    `.trim()
    write(logMessage)
    write('\n\n')

    /*
    if (wsMessages.length - presidiumMessages.length > 1) {
      throw new Error('ws pulled ahead beyond 1 message')
    }
    */

    await sleep(1000)
  }
})
